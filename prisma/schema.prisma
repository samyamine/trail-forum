// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(cuid())
  comments          Comment[]
  downVotedComments UserCommentDownVote[]
  upVotedComments   UserCommentUpVote[]
  topics            Topic[]
  downVotedTopics   UserTopicDownVote[]
  upVotedTopics     UserTopicUpVote[]
  savedComments     UserCommentSave[]
  savedTopics       UserTopicSave[]
}

model Comment {
  id         String                @id @default(cuid())
  authorId   String
  author     User                  @relation(fields: [authorId], references: [id])
  topicId    String
  topic      Topic                 @relation(fields: [topicId], references: [id])
  downVoters UserCommentDownVote[]
  upVoters   UserCommentUpVote[]
  savers     UserCommentSave[]
}

model Topic {
  id         String              @id @default(cuid())
  authorId   String
  author     User                @relation(fields: [authorId], references: [id])
  downVoters UserTopicDownVote[]
  upVoters   UserTopicUpVote[]
  comments   Comment[]
  savers     UserTopicSave[]
}

model UserCommentDownVote {
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model UserCommentUpVote {
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model UserTopicDownVote {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
}

model UserTopicUpVote {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
}

model UserTopicSave {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
}

model UserCommentSave {
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}
