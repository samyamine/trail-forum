generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id         String                @id @default(cuid())
  answers    Answer[]
  authorId   String
  author     User                  @relation(fields: [authorId], references: [id])
  body       String
  createdAt  DateTime              @default(now())
  downVoters UserCommentDownVote[]
  savers     UserCommentSave[]
  topicId    String
  topic      Topic                 @relation(fields: [topicId], references: [id])
  updatedAt  DateTime              @updatedAt
  upVoters   UserCommentUpVote[]
}

model Answer {
  id         String               @id @default(cuid())
  authorId   String
  author     User                 @relation(fields: [authorId], references: [id])
  body       String
  createdAt  DateTime             @default(now())
  downVoters UserAnswerDownVote[]
  parentId   String
  parent     Comment              @relation(fields: [parentId], references: [id])
  savers     UserAnswerSave[]
  updatedAt  DateTime             @updatedAt
  upVoters   UserAnswerUpVote[]
}

model Topic {
  id         String              @id @default(cuid())
  authorId   String
  author     User                @relation(fields: [authorId], references: [id])
  body       String
  category   String
  comments   Comment[]
  country    String
  createdAt  DateTime            @default(now())
  downVoters UserTopicDownVote[]
  savers     UserTopicSave[]
  title      String
  updatedAt  DateTime            @updatedAt
  upVoters   UserTopicUpVote[]
}

model User {
  id                String                @id @default(cuid())
  answers           Answer[]
  comments          Comment[]
  country           String
  createdAt         DateTime              @default(now())
  downVotedAnswers  UserAnswerDownVote[]
  downVotedComments UserCommentDownVote[]
  downVotedTopics   UserTopicDownVote[]
  followers         Follows[]             @relation("Followers")
  following         Follows[]             @relation("Following")
  savedAnswers      UserAnswerSave[]
  savedComments     UserCommentSave[]
  savedTopics       UserTopicSave[]
  topics            Topic[]
  updatedAt         DateTime              @updatedAt
  upVotedAnswers    UserAnswerUpVote[]
  upVotedComments   UserCommentUpVote[]
  upVotedTopics     UserTopicUpVote[]
  username          String
}

model UserAnswerDownVote {
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  answerId String
  answer   Answer @relation(fields: [answerId], references: [id])

  @@id([userId, answerId])
}

model UserAnswerSave {
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  answerId String
  answer   Answer @relation(fields: [answerId], references: [id])

  @@id([userId, answerId])
}

model UserAnswerUpVote {
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  answerId String
  answer   Answer @relation(fields: [answerId], references: [id])

  @@id([userId, answerId])
}

model Follows {
  followerId  String
  follower    User   @relation("Followers", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("Following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model UserCommentDownVote {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model UserCommentSave {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model UserCommentUpVote {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model UserTopicDownVote {
  userId  String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, topicId])
}

model UserTopicSave {
  userId  String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, topicId])
}

model UserTopicUpVote {
  userId  String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, topicId])
}
